@page "/"
@using ScriptContainer
@inject IJSRuntime scriptService

<div class="element-container">
  <div class="doc">
    <h2>Document Bounds</h2>
    <ul>
      <li>@DocW</li>
      <li>@DocH</li>
    </ul>
  </div>
  <div class="element" @ref="ElementA">
    <h2>Element A Bounds</h2>
    <ul>
      <li>@ItemAW</li>
      <li>@ItemAH</li>
    </ul>
  </div>
  <div class="element element-sm" @ref="ElementB">
    <h2>Element B Bounds</h2>
    <ul>
      <li>@ItemBW</li>
      <li>@ItemBH</li>
    </ul>
  </div>
</div>

@code
{
  public double DocW { get; set; }
  public double DocH { get; set; }
  public double ItemAW { get; set; }
  public double ItemAH { get; set; }
  public double ItemBW { get; set; }
  public double ItemBH { get; set; }
  public ScriptService ScaleService { get; set; }
  public ElementReference ElementA { get; set; }
  public ElementReference ElementB { get; set; }
  public ElementReference CanvasA { get; set; }
  public ElementReference CanvasB { get; set; }

  protected override async Task OnAfterRenderAsync(bool setup)
  {
    if (setup)
    {
      ScaleService = new ScriptService(scriptService);

      await ScaleService.CreateModule();
      await GetBounds();

      ScaleService.OnSize = async message => await GetBounds();
    }

    await base.OnAfterRenderAsync(setup);
  }

  protected async Task GetBounds()
  {
    var docBounds = await ScaleService.GetDocBounds();

    DocW = docBounds.X;
    DocH = docBounds.Y;

    var itemBoundsA = await ScaleService.GetElementBounds(ElementA);
    var itemBoundsB = await ScaleService.GetElementBounds(ElementB);

    ItemAW = itemBoundsA.X;
    ItemAH = itemBoundsA.Y;
    ItemBW = itemBoundsB.X;
    ItemBH = itemBoundsB.Y;

    await InvokeAsync(StateHasChanged);
  }
}
