@page "/"
@using ScriptContainer
@inject IJSRuntime scriptService

<div class="element-container" @ref="ElementA">
  <div class="element" @ref="ElementA">
    <h2>Document Bounds</h2>
    <ul>
      <li>@DocW</li>
      <li>@DocH</li>
    </ul>
  </div>
  <div class="element" @ref="ElementB">
    <h2>Element Bounds</h2>
    <ul>
      <li>@ItemW</li>
      <li>@ItemH</li>
    </ul>
  </div>
</div>

@code
{
  public double DocW { get; set; }
  public double DocH { get; set; }
  public double ItemW { get; set; }
  public double ItemH { get; set; }
  public ScriptService ScaleService { get; set; }
  public ElementReference ElementA { get; set; }
  public ElementReference ElementB { get; set; }

  protected override async Task OnAfterRenderAsync(bool setup)
  {
    if (setup)
    {
      ScaleService = new ScriptService(scriptService);

      await ScaleService.CreateModule();
      await GetBounds();

      ScaleService.OnSize = async message => await GetBounds();
    }

    await base.OnAfterRenderAsync(setup);
  }

  protected async Task GetBounds()
  {
    var docBounds = await ScaleService.GetDocBounds();

    DocW = docBounds.Width;
    DocH = docBounds.Height;

    var itemBoundsA = await ScaleService.GetElementBounds(ElementA);
    var itemBoundsB = await ScaleService.GetElementBounds(ElementB);

    ItemW = docBounds.Width;
    ItemH = docBounds.Height;

    await InvokeAsync(StateHasChanged);
  }
}
